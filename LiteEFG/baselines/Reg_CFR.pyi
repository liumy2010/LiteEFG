import LiteEFG as LiteEFG
from __future__ import annotations
import math as math
__all__ = ['LiteEFG', 'graph', 'math']
class graph(LiteEFG._LiteEFG.Graph):
    def __init__(self, kappa = 1.0, tau = 0.1, regularizer: typing.Literal['Euclidean', 'Entropy'] = 'Entropy', weighted = False, shrink_iter = 100000, out_reg = False):
        ...
    def _update(self, gradient, upd_u, ref_u, is_stabilize = False):
        ...
    def current_strategy(self) -> LiteEFG._LiteEFG.GraphNode:
        ...
    def get_ev(self, gradient, ev, strategy, ref_strategy):
        ...
    def update_graph(self, env: LiteEFG._LiteEFG.Environment) -> None:
        ...
